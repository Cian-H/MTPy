[tool.poetry]
name = "mtpy"
version = "0.4.3"
description = "A python based tool for Meltpool Tomography."
authors = ["Cian Hughes <cian.hughes@dcu.ie>"]
readme = "README.md"
license = "MIT"
packages = [{ include = "mtpy", from = "." }]

[tool.poetry.urls]
repository = "https://github.com/Cian-H/I-Form_Server_Node_Deployer"
documentation = "https://mtpylib.readthedocs.io/"

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
numpy = "^2.2.6"
matplotlib = "^3.10.3"
plotly = "^6.1.1"
dask = { extras = [
    "complete",
    "dataframe",
    "distributed",
], version = "^2025.5.1" }
tqdm = "^4.67.1"
psutil = "^7.0.0"
pandas = "^2.2.3"
tables = "^3.10.2"
lz4 = "^4.4.4"
bokeh = "^3.7.3"
holoviews = "^1.20.2"
datashader = "^0.18.1"
dash = "^3.0.4"
openpyxl = "^3.1.5"
odfpy = "^1.4.1"
fsspec = "^2025.5.1"
pyarrow = "^20.0.0"
loguru = "^0.7.3"
flatbuffers = "^25.2.10"
h5py = "^3.13.0"
typer = "^0.15.4"
read-aconity-layers = "^0.4.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
memory-profiler = "^0.61.0"
maturin = "^1.5.1"
graphviz = "^0.20.3"
line-profiler = "^4.1.2"
snakeviz = "^2.2.0"
pre-commit = "^4.2.0"
mypy = "^1.15.0"
lxml = "^5.4.0"
pandas-stubs = "^2.2.3"
types-tqdm = "^4.67.0"
types-psutil = "^7.0.0"
ruff = "^0.11.11"
hypothesis = { extras = ["numpy"], version = "^6.131.28" }
pydoclint = "^0.6.6"
semver = "^3.0.4"
inquirer = "^3.4.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocstrings = "^0.29.1"
mkdocs-material = "^9.6.14"
mkdocs-git-revision-date-localized-plugin = "^1.4.6"
mkdocs-gen-files = "^0.5.0"
mkdocstrings-python = "^1.16.11"
pylint = "^3.3.7"                                    # <- not being used for linting, installed mostly for pyreverse
mkdocs-literate-nav = "^0.6.2"
mkdocs-section-index = "^0.3.10"
mkdocs-autorefs = "^1.4.2"
mkdocs-mermaid2-plugin = "^1.2.1"
mkdocs-panzoom-plugin = "^0.2.2"
markdown-callouts = "^0.4.0"
termynal = "^0.13.0"
mkdocs-typer2 = "^0.1.4"
mkdocs-macros-plugin = "^1.3.7"
beautifulsoup4 = "^4.13.4"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py39"]
include = '\.pyi?$'
exclude = '''
\.venv/
|\.toml$
|\.sh$
|\.git$
|\.ini$
|\.json$
|\.txt$
|\.jl$
|\.rs$
|\.md$
|\docs/
'''

[tool.ruff]
# Same as Black.
line-length = 100
# Assume Python 3.11
target-version = "py311"
exclude = ["docs/", "tests/"]

[tool.ruff.lint]
# Configure ruff to be *heavily* opinionated. We want to enforce a consistent style across all code.
# Enable checks for pydocstyle (`D`), pycodestyle (`E`, `W`), Pyflakes (`F`), McCabe Complexity (C90)
# isort (`I`), pep8 naming (`N`), flake8 (`A`, `ANN`, `B`, `C4`, `EM`, `FBT`, `ICN`, `INT`, `ISC`, `PT`,
# `PTH`, `RET`, `SIM`, `TC`, and `TID`), perflint (`PERF`), numpy rules (`NPY`), pandas
# rules (`PD`), pylint (`PL`), ruff rules (`RUF`).
select = [
    "D",
    "E",
    "W",
    "F",
    "C90",
    "I",
    "N",
    "A",
    "ANN",
    "B",
    "C4",
    "EM",
    "FBT",
    "ICN",
    "INT",
    "ISC",
    "PT",
    "PTH",
    "RET",
    "SIM",
    "TC",
    "TID",
    "PERF",
    "NPY",
    "PD",
    "PL",
    "RUF",
]
# Reasons for disabling certain rules:
# - PD002: despite its problems we need to use inplace operations for performance reasons.
# - ANN002: as much as i'd like to enforce this using `TypedDict`s and a `__kwargs__`
#       dunder, it would tightly couple us to external libraries.
# - ANN003: same as above.
# - PLR0913: as nice as smaller functions are for maintenance and readability, this rule
#       is unenforceable in such a data-heavy library.
# - PLR0914: same as above.
# - PLR0917: same as above.
# - TC001: the `TYPE_CHECKING` blocks either don't work or i'm too stupid to get them to work.
# - TC002: same as above.
# - TC003: same as above.
# - ISC001: Personally, i really like this rule but apparently it can cause issues with the ruff formatter.
# - D107: Should already be covered by DOC301 in pydoclint
ignore = [
    "PD002",
    "ANN002",
    "ANN003",
    "PLR0913",
    # "PLR0914",
    # "PLR0917",
    "TC001",
    "TC002",
    "TC003",
    "ISC001",
    "D107",
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".vscode",
    "docs",
    "mtpy/utils/tree_metadata/*.py",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
extend-select = ["I"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = -1

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = true

[tool.ruff.lint.per-file-ignores]
"mtpy/utils/tree_metadata/Metadata.pyi" = [
    "C901",
    "N802",
    "N803",
    "N999",
    "FBT001",
]
"mtpy/utils/tree_metadata/Sha1.pyi" = ["C901", "N802", "N803", "N999", "FBT001"]
"mtpy/utils/tree_metadata/TreeFile.pyi" = [
    "C901",
    "N802",
    "N803",
    "N999",
    "FBT001",
]

[tool.codespell]
exclude-file = "docs/assets/example_plot.html"
ignore-words-list = ["astroid"]

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true
exclude = ["docs/", "tests/", "scripts/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = [".venv/bin/python"]

[tool.poetry.scripts]
build-flatbuffer-schemas = "scripts.build_flatbuffer_schemas:main"
semver = "scripts.semver_pyproj:main"
sync_init_vars = "scripts.sync_init_vars:main"
bump = "scripts.bump:main"
