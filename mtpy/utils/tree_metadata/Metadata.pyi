"""An autogenerated submodule.

Contains the code for parsing Metadata entries in the tree_metadata flatbuffer schema.
"""

from typing import Optional

import flatbuffers

from mtpy.utils.tree_metadata.TreeFile import TreeFile

class Metadata(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls: type[Metadata], buf: bytes, offset: int = 0) -> "Metadata":
        """Gets the root of the flatbuffer as a Metadata class.

        Args:
            cls (type[Metadata]): A reference to the Metadata class
            buf (bytes): The buffer of bytes to write to
            offset (int): The offset at which to start writing

        Returns:
            Metadata: A reference to the root Metadata class
        """
        ...

    @classmethod
    def GetRootAsMetadata(cls: type[Metadata], buf: bytes, offset: int = 0) -> "Metadata":
        """This method is deprecated. Please switch to GetRootAs.

        Args:
            cls (type[Metadata]): A reference to the Metadata class
            buf (bytes): The buffer of bytes to write to
            offset (int): The offset at which to start writing

        Returns:
            Metadata: A reference to the root Metadata class
        """
        ...

    def Init(self: "Metadata", buf: bytes, pos: int) -> None:
        """Initialises a new Metadata class.

        Args:
            self (Metadata): The instance to initialise
            buf (bytes): The buffer to read/write to/from with this class
            pos (int): The position at which to begin reading/writin
        """
        ...

    def Size(self: "Metadata") -> int:
        """Gets the size field from the current Metadata buffer.

        Args:
            self (Metadata): The instance to get the size for

        Returns:
            int: The size of the file in bytes
        """
        ...

    def Tree(self: "Metadata", j: int) -> Optional[TreeFile]:
        """Gets the tree field from the current Metadata buffer.

        Args:
            self (Metadata): The instance to get the tree for
            j (int): The index of the TreeFile to get

        Returns:
            TreeFile, Optional: The file at index j in the Tree
        """
        ...

    def TreeLength(self: "Metadata") -> int:
        """Gets the length tree vector from the current Metadata buffer.

        Args:
            self (Metadata): The instance to get the Tree for

        Returns:
            int: The length of the Tree vector
        """
        ...

    def TreeIsNone(self: "Metadata") -> bool:
        """Checks if Tree field in current Metadata buffer is None.

        Args:
            self (Metadata): The instance to check the tree for

        Returns:
            bool: True if Tree is None else False
        """
        ...

def MetadataStart(builder: flatbuffers.Builder) -> None:
    """Start a new Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
    """
    ...

def Start(builder: flatbuffers.Builder) -> None:
    """Start a new Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
    """
    ...

def MetadataAddSize(builder: flatbuffers.Builder, size: int) -> None:
    """Add the Size field to the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        size (int): The Size buffer to add
    """
    ...

def AddSize(builder: flatbuffers.Builder, size: int) -> None:
    """Add the Size field to the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        size (int): The Size buffer to add
    """
    ...

def MetadataAddTree(builder: flatbuffers.Builder, tree: int) -> None:
    """Add the Tree field to the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        tree (int): The Tree buffer to add
    """
    ...

def AddTree(builder: flatbuffers.Builder, tree: int) -> None:
    """Add the Tree field to the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        tree (int): The Tree buffer to add
    """
    ...

def MetadataStartTreeVector(builder: flatbuffers.Builder, numElems: int) -> int:
    """Add an empty Tree field to the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        numElems (int): The number of empty TreeFile buffers to initialise

    Returns:
        int: an exit code for the flatbuffer builder process
    """
    ...

def StartTreeVector(builder: flatbuffers.Builder, numElems: int) -> int:
    """Add an empty Tree field to the buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object
        numElems (int): The number of empty TreeFile buffers to initialise

    Returns:
        int: an exit code for the flatbuffer builder process
    """
    ...

def MetadataEnd(builder: flatbuffers.Builder) -> int:
    """Finalize the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object

    Returns:
        int: an exit code for the flatbuffer builder process
    """
    ...

def End(builder: flatbuffers.Builder) -> int:
    """Finalize the Metadata buffer.

    Args:
        builder (flatbuffers.Builder): The flatbuffer Builder object

    Returns:
        int: an exit code for the flatbuffer builder process
    """
    ...
