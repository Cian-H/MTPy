# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tree_metadata

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TreeFile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TreeFile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTreeFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TreeFile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TreeFile
    def Filepath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TreeFile
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from tree_metadata.Sha1 import Sha1
            obj = Sha1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TreeFile
    def IsDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TreeFile
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def TreeFileStart(builder):
    builder.StartObject(4)

def Start(builder):
    TreeFileStart(builder)

def TreeFileAddFilepath(builder, filepath):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(filepath), 0)

def AddFilepath(builder, filepath):
    TreeFileAddFilepath(builder, filepath)

def TreeFileAddHash(builder, hash):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)

def AddHash(builder, hash):
    TreeFileAddHash(builder, hash)

def TreeFileAddIsDir(builder, isDir):
    builder.PrependBoolSlot(2, isDir, 0)

def AddIsDir(builder, isDir):
    TreeFileAddIsDir(builder, isDir)

def TreeFileAddSize(builder, size):
    builder.PrependUint64Slot(3, size, 0)

def AddSize(builder, size):
    TreeFileAddSize(builder, size)

def TreeFileEnd(builder):
    return builder.EndObject()

def End(builder):
    return TreeFileEnd(builder)
